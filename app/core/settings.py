"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    DEBUG_TOOLBAR_ENABLED=(bool, False),
)
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party
    "django_extensions",
    "ninja",
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "tinymce",
    # local
    "accounts",
    "payments",
    "customizations",
]

X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019", "fields.W342"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.CurrentRequestMiddleware",
]

ROOT_URLCONF = "core.urls"

AUTH_USER_MODEL = "accounts.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "colored": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(white)s%(asctime)-4s%(reset)s %(log_color)s%(levelname)-6s%(reset)s %(blue)s%(name)-2s%(reset)s %(log_color)s%(message)s",
            "log_colors": {
                "SUCCESS": "green",
            },
        },
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s {%(pathname)s:%(lineno)d} - %(message)s",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": [],
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "colorized_console": {
            "level": "INFO",
            "filters": [],
            "class": "logging.StreamHandler",
            "formatter": "colored",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
            "filters": [],
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.db.backends": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "celery": {"handlers": ["console"], "level": "INFO", "propagate": False},
        "celery.task": {"handlers": ["console"], "level": "INFO", "propagate": False},
        "accounts": {
            "handlers": ["colorized_console"],
            "level": "INFO",
            "propagate": False,
        },
        "payments": {
            "handlers": ["colorized_console"],
            "level": "INFO",
            "propagate": False,
        },
        "api": {
            "handlers": ["colorized_console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": env.db_url("DATABASE_DSN"),
}
DATABASES["default"]["ENGINE"] = "django.db.backends.postgresql"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    BASE_DIR / "core/locale",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "media/"

# dockerized volumes
STATIC_ROOT = env("STATIC_ROOT", default="/var/www/pdj/static/")
MEDIA_ROOT = env("MEDIA_ROOT", default="/var/www/pdj/media/")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# oidc
OIDC_ISSUER_URI = env("OIDC_ISSUER_URI")
OIDC_CLIENT_ID = env("OIDC_CLIENT_ID")
OIDC_CLIENT_SECRET = env("OIDC_CLIENT_SECRET")

# payments
DEFAULT_CURRENCY = env("DEFAULT_CURRENCY", default="USD")

# ninja
NINJA_PAGINATION_PER_PAGE = 10
NINJA_PAGINATION_MAX_LIMIT = 20

# email config
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="webmaster@pdj.com")
EMAIL_BACKEND = env(
    "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = env("EMAIL_HOST", default="localhost")
EMAIL_PORT = env.int("EMAIL_PORT", default=25)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)

# pdj
PDJ_TITLE_NAME = env("PDJ_TITLE_NAME", default="PDJ")
PDJ_MAIN_USER_EMAIL = env("PDJ_MAIN_USER_EMAIL")
PDJ_MAIN_USER_PASSWORD = env("PDJ_MAIN_USER_PASSWORD")
PDJ_CLIENT_ID = env("PDJ_CLIENT_ID")
PDJ_CLIENT_SECRET = env("PDJ_CLIENT_SECRET")
PDJ_DOMAIN = env("PDJ_DOMAIN")
PDJ_PAYPAL_CLIENT_ID = env("PDJ_PAYPAL_CLIENT_ID")
PDJ_PAYPAL_CLIENT_SECRET = env("PDJ_PAYPAL_CLIENT_SECRET")
PDJ_PAYPAL_ENDPOINT_SECRET = env("PDJ_PAYPAL_ENDPOINT_SECRET")
PDJ_PAYPAL_IS_SANDBOX = env.bool("PDJ_PAYPAL_IS_SANDBOX")

PDJ_INITIALIZERS = [
    "accounts.initializers.UserInitializer",
    "accounts.initializers.ClientInitializer",
    "payments.initializers.ProcessorInitializer",
    "customizations.initializers.EmailTemplateInitializer",
    "customizations.initializers.ThemeInitializer",
]

# celery
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default="redis://redis:6379/1")
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://redis:6379/2")
CELERY_TASK_ACKS_LATE = False
CELERY_IGNORE_RESULT = True

CELERY_BEAT_SCHEDULE = {
    "paypal-sync-plans": {
        "task": "payments.tasks.paypal.sync_plans",
        "schedule": 30,
        "args": tuple(),
    },
    "paypal-sync-products": {
        "task": "payments.tasks.paypal.sync_products",
        "schedule": 60,
        "args": tuple(),
    },
}

CACHES = {
    "default": {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"},
    "admin_interface": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "TIMEOUT": 60 * 5,
    },
}

# tinymce
TINYMCE_JS_URL = "tinymce/tinymce.min.js"
TINYMCE_SPELLCHECKER = False
TINYMCE_COMPRESSOR = False
TINYMCE_DEFAULT_CONFIG = {
    "mode": "textarea",
    "theme": "silver",
    "height": 500,
    "menubar": True,
    "protect": [
        "/\<\/?(if|endif|else)\>/g",
        "/{%[\s\S]*?%}/g",
        "/{{[\s\S]*?}}/g",
    ],
    "valid_children": [
        "+body[style]",
        "-body[div]",
        "p[strong|a|#text]",
        "+p[span]",
        "p[code|pre|span]",
        "div[span|p|#text]",
        "section[header|footer|article|p]",
    ],
    "custom_elements": "dj-extends,dj-block",
    "extended_valid_elements": "dj-extends,dj-block",
    "setup": """function (editor) {
        editor.on('BeforeSetContent', function (e) {
            e.content = e.content.replace(/{%\s*extends\s*"([^"]+)"\s*%}/g, '<dj-extends data-template="$1"></dj-extends>')
                .replace(/{%\s*block\s*(\w+)\s*%}/g, '<dj-block data-block="$1">')
                .replace(/{%\s*endblock\s*%}/g, '</dj-block>');
        });
        editor.on('GetContent', function (e) {
            e.content = e.content.replace(/<dj-extends data-template="([^"]+)"><\/dj-extends>/g, '{% extends "$1" %}')
                .replace(/<dj-block data-block="(\w+)">/g, '{% block $1 %}')
                .replace(/<\/dj-block>/g, '{% endblock %}');
        });
    }""",
    "newline_behavior": "linebreak",
    "forced_root_block": "",
    "force_br_newlines": False,
    "force_p_newlines": False,
    "plugins": "advlist,autolink,lists,link,image,charmap,preview,anchor,"
    "searchreplace,visualblocks,code,fullscreen,insertdatetime,media,table,"
    "code,help,wordcount",
    "toolbar": "undo redo | formatselect | "
    "bold italic backcolor | alignleft aligncenter "
    "alignright alignjustify | bullist numlist outdent indent | "
    "removeformat | code | help",
}

# django toolbar
DEBUG_TOOLBAR_ENABLED = env("DEBUG_TOOLBAR_ENABLED")
if DEBUG_TOOLBAR_ENABLED:
    try:
        import debug_toolbar

        INSTALLED_APPS += ["debug_toolbar"]
        MIDDLEWARE = ["debug_toolbar.middleware.DebugToolbarMiddleware"] + MIDDLEWARE

        INTERNAL_IPS = [
            "127.0.0.1",
        ]

        # ignore docker ips
        DEBUG_TOOLBAR_CONFIG = {
            "SHOW_TOOLBAR_CALLBACK": lambda request: True,
        }
    except ModuleNotFoundError as e:
        print(e.args[0])

# sentry
SENTRY_DSN = env("SENTRY_DSN")
if SENTRY_DSN:
    try:
        import django.db.models.signals
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration

        sentry_sdk.init(
            dsn=SENTRY_DSN,
            # for track all transactions
            traces_sample_rate=0,
            # for profile metrics
            profiles_sample_rate=0,
            # for errors despite of transactions
            sample_rate=0.1,
            send_default_pii=False,
            integrations=[
                DjangoIntegration(
                    transaction_style="url",
                    middleware_spans=True,
                    signals_spans=True,
                    signals_denylist=[
                        django.db.models.signals.pre_init,
                        django.db.models.signals.post_init,
                    ],
                    cache_spans=False,
                ),
            ],
        )
    except ModuleNotFoundError as e:
        print(e.args[0])
